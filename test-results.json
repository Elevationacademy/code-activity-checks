{"numFailedTestSuites":1,"numFailedTests":1,"numPassedTestSuites":3,"numPassedTests":3,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTotalTestSuites":4,"numTotalTests":4,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1587646086033,"success":false,"testResults":[{"console":null,"failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mExercise 2 › findMoviesByYearAndGenre function should receive 2 parameters (year and genre) and return an array with titles of movies with matching year and genre\u001b[39m\u001b[22m\n\n    Expected to receive ['Ice Age'] when searching for movies with year of 2002 and genre of Animation, but received undefined instead__stacktrace__\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 20 | \u001b[39m\u001b[32m          'Animation'\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 21 | \u001b[39m\u001b[32m        ))} instead`\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 22 | \u001b[39m      )\u001b[33m.\u001b[39mtoEqual([\u001b[32m'Ice Age'\u001b[39m])\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m        \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 23 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 24 | \u001b[39m      expect(\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 25 | \u001b[39m        findMoviesByYearAndGenre(\u001b[35m2003\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'History'\u001b[39m)\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toEqual (\u001b[2m\u001b[0m\u001b[36mtests/exercises/ex-2.test.js\u001b[39m\u001b[0m\u001b[2m:22:9)\u001b[2m\u001b[22m\n","numFailingTests":1,"numPassingTests":0,"numPendingTests":0,"perfStats":{"end":1587646087820,"start":1587646087011},"snapshot":{"added":0,"fileDeleted":false,"matched":0,"unchecked":0,"unmatched":0,"updated":0,"uncheckedKeys":[]},"testFilePath":"/Users/liorhoshea/Documents/Contents-FS/js-basics-evaluation-dir/js-basics-evaluation-solutions/tests/exercises/ex-2.test.js","testResults":[{"ancestorTitles":["Exercise 2"],"duration":93,"failureMessages":["Error: Expected to receive ['Ice Age'] when searching for movies with year of 2002 and genre of Animation, but received undefined instead__stacktrace__\n    at Object.toEqual (/Users/liorhoshea/Documents/Contents-FS/js-basics-evaluation-dir/js-basics-evaluation-solutions/tests/exercises/ex-2.test.js:22:9)\n    at Object.asyncJestTest (/Users/liorhoshea/Documents/Contents-FS/js-basics-evaluation-dir/js-basics-evaluation-solutions/node_modules/jest-jasmine2/build/jasmine_async.js:108:37)\n    at resolve (/Users/liorhoshea/Documents/Contents-FS/js-basics-evaluation-dir/js-basics-evaluation-solutions/node_modules/jest-jasmine2/build/queue_runner.js:56:12)\n    at new Promise (<anonymous>)\n    at mapper (/Users/liorhoshea/Documents/Contents-FS/js-basics-evaluation-dir/js-basics-evaluation-solutions/node_modules/jest-jasmine2/build/queue_runner.js:43:19)\n    at promise.then (/Users/liorhoshea/Documents/Contents-FS/js-basics-evaluation-dir/js-basics-evaluation-solutions/node_modules/jest-jasmine2/build/queue_runner.js:87:41)"],"fullName":"Exercise 2 findMoviesByYearAndGenre function should receive 2 parameters (year and genre) and return an array with titles of movies with matching year and genre","location":null,"numPassingAsserts":0,"status":"failed","title":"findMoviesByYearAndGenre function should receive 2 parameters (year and genre) and return an array with titles of movies with matching year and genre"}],"sourceMaps":{},"skipped":false,"leaks":false},{"console":null,"failureMessage":null,"numFailingTests":0,"numPassingTests":1,"numPendingTests":0,"perfStats":{"end":1587646087957,"start":1587646087871},"snapshot":{"added":0,"fileDeleted":false,"matched":0,"unchecked":0,"unmatched":0,"updated":0,"uncheckedKeys":[]},"testFilePath":"/Users/liorhoshea/Documents/Contents-FS/js-basics-evaluation-dir/js-basics-evaluation-solutions/tests/exercises/ex-3.test.js","testResults":[{"ancestorTitles":["Exercise 3"],"duration":13,"failureMessages":[],"fullName":"Exercise 3 findNumOfMoviesByActors function should receive 1 parameter - actors array, and return the number of movies in which all the actors included in","location":null,"numPassingAsserts":0,"status":"passed","title":"findNumOfMoviesByActors function should receive 1 parameter - actors array, and return the number of movies in which all the actors included in"}],"sourceMaps":{},"skipped":false,"leaks":false},{"console":null,"failureMessage":null,"numFailingTests":0,"numPassingTests":1,"numPendingTests":0,"perfStats":{"end":1587646088041,"start":1587646087966},"snapshot":{"added":0,"fileDeleted":false,"matched":0,"unchecked":0,"unmatched":0,"updated":0,"uncheckedKeys":[]},"testFilePath":"/Users/liorhoshea/Documents/Contents-FS/js-basics-evaluation-dir/js-basics-evaluation-solutions/tests/exercises/ex-4.test.js","testResults":[{"ancestorTitles":["Exercise 4"],"duration":19,"failureMessages":[],"fullName":"Exercise 4 countMoviesByGenres function should receive no parameter, and return an object with key-value pairs of genre and number of movies that belong to that genre","location":null,"numPassingAsserts":0,"status":"passed","title":"countMoviesByGenres function should receive no parameter, and return an object with key-value pairs of genre and number of movies that belong to that genre"}],"sourceMaps":{},"skipped":false,"leaks":false},{"console":null,"failureMessage":null,"numFailingTests":0,"numPassingTests":1,"numPendingTests":0,"perfStats":{"end":1587646088112,"start":1587646088055},"snapshot":{"added":0,"fileDeleted":false,"matched":0,"unchecked":0,"unmatched":0,"updated":0,"uncheckedKeys":[]},"testFilePath":"/Users/liorhoshea/Documents/Contents-FS/js-basics-evaluation-dir/js-basics-evaluation-solutions/tests/exercises/ex-1.test.js","testResults":[{"ancestorTitles":["Exercise 1"],"duration":9,"failureMessages":[],"fullName":"Exercise 1 findMoviesByDurRange function should receive 2 parameters (minDur and maxDur) and return an array with titles of movies which duration is between minDur and maxDur (not included)","location":null,"numPassingAsserts":0,"status":"passed","title":"findMoviesByDurRange function should receive 2 parameters (minDur and maxDur) and return an array with titles of movies which duration is between minDur and maxDur (not included)"}],"sourceMaps":{},"skipped":false,"leaks":false}],"wasInterrupted":false}