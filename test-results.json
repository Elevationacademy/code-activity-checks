{"numFailedTestSuites":0,"numFailedTests":0,"numPassedTestSuites":4,"numPassedTests":4,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTotalTestSuites":4,"numTotalTests":4,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1587560269931,"success":true,"testResults":[{"console":null,"failureMessage":null,"numFailingTests":0,"numPassingTests":1,"numPendingTests":0,"perfStats":{"end":1587560271672,"start":1587560271228},"snapshot":{"added":0,"fileDeleted":false,"matched":0,"unchecked":0,"unmatched":0,"updated":0,"uncheckedKeys":[]},"testFilePath":"/Users/liorhoshea/Documents/Contents-FS/js-basics-evaluation-dir/js-basics-evaluation-solutions/tests/exercises/ex-3.test.js","testResults":[{"ancestorTitles":["Exercise 3"],"duration":29,"failureMessages":[],"fullName":"Exercise 3 findNumOfMoviesByActors function should receive 1 parameter - actors array, and return the number of movies in which all the actors included in","location":null,"numPassingAsserts":0,"status":"passed","title":"findNumOfMoviesByActors function should receive 1 parameter - actors array, and return the number of movies in which all the actors included in"}],"sourceMaps":{},"skipped":false,"leaks":false},{"console":null,"failureMessage":null,"numFailingTests":0,"numPassingTests":1,"numPendingTests":0,"perfStats":{"end":1587560271758,"start":1587560271696},"snapshot":{"added":0,"fileDeleted":false,"matched":0,"unchecked":0,"unmatched":0,"updated":0,"uncheckedKeys":[]},"testFilePath":"/Users/liorhoshea/Documents/Contents-FS/js-basics-evaluation-dir/js-basics-evaluation-solutions/tests/exercises/ex-1.test.js","testResults":[{"ancestorTitles":["Exercise 1"],"duration":12,"failureMessages":[],"fullName":"Exercise 1 findMoviesByDurRange function should receive 2 parameters (minDur and maxDur) and return an array with titles of movies which duration is between minDur and maxDur (not included)","location":null,"numPassingAsserts":0,"status":"passed","title":"findMoviesByDurRange function should receive 2 parameters (minDur and maxDur) and return an array with titles of movies which duration is between minDur and maxDur (not included)"}],"sourceMaps":{},"skipped":false,"leaks":false},{"console":null,"failureMessage":null,"numFailingTests":0,"numPassingTests":1,"numPendingTests":0,"perfStats":{"end":1587560271885,"start":1587560271791},"snapshot":{"added":0,"fileDeleted":false,"matched":0,"unchecked":0,"unmatched":0,"updated":0,"uncheckedKeys":[]},"testFilePath":"/Users/liorhoshea/Documents/Contents-FS/js-basics-evaluation-dir/js-basics-evaluation-solutions/tests/exercises/ex-2.test.js","testResults":[{"ancestorTitles":["Exercise 2"],"duration":9,"failureMessages":[],"fullName":"Exercise 2 findMoviesByYearAndGenre function should receive 2 parameters (year and genre) and return an array with titles of movies with matching year and genre","location":null,"numPassingAsserts":0,"status":"passed","title":"findMoviesByYearAndGenre function should receive 2 parameters (year and genre) and return an array with titles of movies with matching year and genre"}],"sourceMaps":{},"skipped":false,"leaks":false},{"console":null,"failureMessage":null,"numFailingTests":0,"numPassingTests":1,"numPendingTests":0,"perfStats":{"end":1587560272386,"start":1587560271892},"snapshot":{"added":0,"fileDeleted":false,"matched":0,"unchecked":0,"unmatched":0,"updated":0,"uncheckedKeys":[]},"testFilePath":"/Users/liorhoshea/Documents/Contents-FS/js-basics-evaluation-dir/js-basics-evaluation-solutions/tests/exercises/ex-4.test.js","testResults":[{"ancestorTitles":["Exercise 4"],"duration":87,"failureMessages":[],"fullName":"Exercise 4 countMoviesByGenres function should receive no parameter, and return an object with key-value pairs of genre and number of movies that belong to that genre","location":null,"numPassingAsserts":0,"status":"passed","title":"countMoviesByGenres function should receive no parameter, and return an object with key-value pairs of genre and number of movies that belong to that genre"}],"sourceMaps":{},"skipped":false,"leaks":false}],"wasInterrupted":false}